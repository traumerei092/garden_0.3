'use client';

import { useState, useEffect, useCallback } from 'react';
import { Shop, ShopStats } from '@/types/shops';
import { toggleShopRelation, fetchShopStats } from '@/actions/shop/relation';

// „Éá„Éï„Ç©„É´„Éà„ÅÆ„É™„É¨„Éº„Ç∑„Éß„É≥„Çø„Ç§„ÉóÂÆöÁæ©ÔºàAPI„É¨„Çπ„Éù„É≥„Çπ„Å®‰∏ÄËá¥Ôºâ
export const DEFAULT_RELATIONS = {
  favorite: {
    id: 1,
    name: 'favorite',
    label: 'Ë°å„Åç„Å§„Åë',
    count: 0,
    color: '#00ffff'
  },
  visited: {
    id: 2,
    name: 'visited',
    label: 'Ë°å„Å£„Åü',
    count: 0,
    color: '#ffc107'
  },
  interested: {
    id: 3,
    name: 'interested',
    label: 'Ë°å„Åç„Åü„ÅÑ',
    count: 0,
    color: '#ef4444'
  }
};

interface UseShopActionsProps {
  shops: Shop[];
  onFeedbackModalOpen?: (shopId: number) => void;
}

interface ShopActionState {
  shopStats: { [key: number]: ShopStats };
  loadingRelations: { [key: number]: boolean };
  isLoading: boolean;
}

export const useShopActions = ({ shops, onFeedbackModalOpen }: UseShopActionsProps) => {
  const [state, setState] = useState<ShopActionState>({
    shopStats: {},
    loadingRelations: {},
    isLoading: true
  });

  // ÂêÑÂ∫óËàó„ÅÆÁµ±Ë®à„Éá„Éº„Çø„ÇíÂèñÂæó
  const loadShopStats = useCallback(async () => {
    if (!shops.length) {
      setState(prev => ({ ...prev, isLoading: false }));
      return;
    }

    setState(prev => ({ ...prev, isLoading: true }));

    const newShopStats: { [key: number]: ShopStats } = {};

    for (const shop of shops) {
      try {
        const stats = await fetchShopStats(shop.id.toString());
        newShopStats[shop.id] = stats;
      } catch (error) {
        console.error(`Â∫óËàó${shop.id}„ÅÆÁµ±Ë®à„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó:`, error);
        // „Éá„Éï„Ç©„É´„Éà„ÅÆÁµ±Ë®à„Éá„Éº„Çø„ÇíË®≠ÂÆö
        newShopStats[shop.id] = {
          counts: [
            { id: 1, name: 'favorite', label: 'Ë°å„Åç„Å§„Åë', count: 0, color: '#00ffff' },
            { id: 2, name: 'visited', label: 'Ë°å„Å£„Åü', count: 0, color: '#ffc107' },
            { id: 3, name: 'interested', label: 'Ë°å„Åç„Åü„ÅÑ', count: 0, color: '#ef4444' }
          ],
          user_relations: []
        };
      }
    }

    setState(prev => ({
      ...prev,
      shopStats: newShopStats,
      isLoading: false
    }));
  }, [shops]);

  // Â∫óËàó„Éá„Éº„Çø„ÅåÂ§âÊõ¥„Åï„Çå„Åü„ÇâÁµ±Ë®à„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
  useEffect(() => {
    loadShopStats();
  }, [loadShopStats]);

  // „É™„É¨„Éº„Ç∑„Éß„É≥„ÅÆÂàá„ÇäÊõø„ÅàÂá¶ÁêÜÔºàÁµ±‰∏Ä„É≠„Ç∏„ÉÉ„ÇØÔºâ
  const handleRelationToggle = useCallback(async (shopId: number, relationTypeId: number) => {
    console.log('üî• useShopActions handleRelationToggle:', {
      shopId,
      relationTypeId,
      isVisited: relationTypeId === DEFAULT_RELATIONS.visited.id,
      currentStats: state.shopStats[shopId]
    });

    if (state.loadingRelations[relationTypeId]) return;

    // ÁèæÂú®„ÅÆ„É™„É¨„Éº„Ç∑„Éß„É≥Áä∂ÊÖã„ÇíÁ¢∫Ë™ç
    const currentStats = state.shopStats[shopId];
    const userRelations: { [key: number]: boolean } = {};
    if (currentStats?.user_relations) {
      currentStats.user_relations.forEach((relId: number) => {
        userRelations[relId] = true;
      });
    }

    // visitedRelationÔºà„ÄåË°å„Å£„Åü„Äç„Éú„Çø„É≥Ôºâ„ÅÆÁâπÂà•Âá¶ÁêÜ
    const isVisited = userRelations[DEFAULT_RELATIONS.visited.id] || false;

    if (relationTypeId === DEFAULT_RELATIONS.visited.id) {
      if (!isVisited) {
        // Êú™Ë®™Âïè ‚Üí Ë®™ÂïèÊ∏à„Åø: „É™„É¨„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö + „É¢„Éº„ÉÄ„É´Ë°®Á§∫
        console.log('üî• Setting visited relation and opening feedback modal');

        // „Åæ„Åö„É™„É¨„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
        setState(prev => ({
          ...prev,
          loadingRelations: { ...prev.loadingRelations, [relationTypeId]: true }
        }));

        try {
          await toggleShopRelation(shopId.toString(), relationTypeId);

          // Áµ±Ë®à„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
          const updatedStats = await fetchShopStats(shopId.toString());
          setState(prev => ({
            ...prev,
            shopStats: { ...prev.shopStats, [shopId]: updatedStats },
            loadingRelations: { ...prev.loadingRelations, [relationTypeId]: false }
          }));

          // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
          if (onFeedbackModalOpen) {
            onFeedbackModalOpen(shopId);
          }
        } catch (error) {
          console.error('visited„É™„É¨„Éº„Ç∑„Éß„É≥„ÅÆË®≠ÂÆö„Å´Â§±Êïó:', error);
          setState(prev => ({
            ...prev,
            loadingRelations: { ...prev.loadingRelations, [relationTypeId]: false }
          }));
        }

        return;
      } else {
        // Ë®™ÂïèÊ∏à„Åø ‚Üí Êú™Ë®™Âïè: „É™„É¨„Éº„Ç∑„Éß„É≥Ëß£Èô§„ÅÆ„Åø
        console.log('üî• Removing visited relation');
      }
    }

    // ÈÄöÂ∏∏„ÅÆ„É™„É¨„Éº„Ç∑„Éß„É≥Âàá„ÇäÊõø„ÅàÂá¶ÁêÜ
    setState(prev => ({
      ...prev,
      loadingRelations: { ...prev.loadingRelations, [relationTypeId]: true }
    }));

    try {
      await toggleShopRelation(shopId.toString(), relationTypeId);

      // Áµ±Ë®à„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
      const updatedStats = await fetchShopStats(shopId.toString());
      setState(prev => ({
        ...prev,
        shopStats: { ...prev.shopStats, [shopId]: updatedStats }
      }));
    } catch (error) {
      console.error('„É™„É¨„Éº„Ç∑„Éß„É≥„ÅÆÂàá„ÇäÊõø„Åà„Å´Â§±Êïó:', error);
    } finally {
      setState(prev => ({
        ...prev,
        loadingRelations: { ...prev.loadingRelations, [relationTypeId]: false }
      }));
    }
  }, [state.shopStats, state.loadingRelations, onFeedbackModalOpen]);

  // ÊåáÂÆö„Åï„Çå„ÅüÂ∫óËàó„ÅÆ„É¶„Éº„Ç∂„Éº„É™„É¨„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÂèñÂæó
  const getUserRelations = useCallback((shopId: number): { [key: number]: boolean } => {
    const stats = state.shopStats[shopId];
    const userRelations: { [key: number]: boolean } = {};

    if (stats?.user_relations) {
      stats.user_relations.forEach((relationTypeId: number) => {
        userRelations[relationTypeId] = true;
      });
    }

    return userRelations;
  }, [state.shopStats]);

  // Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞Âæå„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÔºà„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÂÆå‰∫ÜÊôÇ„Å™„Å©Ôºâ
  const refreshShopStats = useCallback(async (shopId: number) => {
    try {
      const updatedStats = await fetchShopStats(shopId.toString());
      setState(prev => ({
        ...prev,
        shopStats: { ...prev.shopStats, [shopId]: updatedStats }
      }));
    } catch (error) {
      console.error('Áµ±Ë®à„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó:', error);
    }
  }, []);

  return {
    shopStats: state.shopStats,
    loadingRelations: state.loadingRelations,
    isLoading: state.isLoading,
    handleRelationToggle,
    getUserRelations,
    refreshShopStats,
    relations: DEFAULT_RELATIONS
  };
};